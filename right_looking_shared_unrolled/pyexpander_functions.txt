$py(TILE_SIZE=4)\
$py(N=16)\
// TILE_SIZE and N are variable/parameter here
$("#define TILE_SIZE %d" % (TILE_SIZE))

__device__ void store_full_row(float* read_data,float* write_data,int i,int N)
{
    int global_y;
    int global_x = i*blockDim.x + threadIdx.x;
    $for(j in range(0,int(N/TILE_SIZE)))\
    $("")
    $("global_y = %d*blockDim.y + threadIdx.y;" % (j))
    $("write_data[global_y*N + global_x] = read_data[threadIdx.x + TILE_SIZE*global_y];")
    $endfor\

    __syncthreads();
}
__device__ void load_full_row(float* read_data,float* write_data,int i,int N)
{
    int global_y;
    int global_x = i*blockDim.x + threadIdx.x;
    $for(j in range(0,int(N/TILE_SIZE)))\
    $("")
    $("global_y = %d*blockDim.y + threadIdx.y;" % (j))
    $("write_data[threadIdx.x + TILE_SIZE*global_y] = read_data[global_y*N + global_x];")
    $endfor\

    __syncthreads();
}
__device__ void potrf_tile(float* t_A)
{
    int t_x = threadIdx.x;
    int t_y = threadIdx.y;
    __shared__ float temp2;
    $for(k in range(0,TILE_SIZE))\
    $("")
    $("if(t_x==t_y && t_x==%d)" % (k))
    $("{")
    $("    t_A[%d*TILE_SIZE + %d] = sqrtf(t_A[%d*TILE_SIZE + %d]);" % (k,k,k,k))
    $("    temp2 = t_A[%d*TILE_SIZE + %d];" % (k,k))
    $("}")
    $("__syncthreads();")
    $("if(t_x<t_y && t_x == %d)" % (k))
    $("{")
    $("    t_A[t_y*TILE_SIZE + %d]/= temp2;" % (k))
    $("}")
    $("__syncthreads();")
    $("if(%d<t_y && %d<t_x && t_x<=t_y)" % (k,k))
    $("{")
    $("    t_A[t_y*TILE_SIZE + t_x]-= t_A[t_x*TILE_SIZE + %d]*t_A[t_y*TILE_SIZE + %d];" % (k,k))
    $("}")
    $("__syncthreads();")
    $endfor\

}
__device__ void trsm_tile(float *row_data,int i,int j,int N)
{
    int global_y = j*blockDim.y + threadIdx.y;
    int global_x = i*blockDim.x + threadIdx.x;
    int t_x = threadIdx.x;
    int t_y = threadIdx.y;
    $for(s in range(0,TILE_SIZE))\
    $("")
    $("if(t_x==%d)" % (s))
    $("{")
    $("    row_data[global_y*TILE_SIZE + t_x]/= row_data[global_x*TILE_SIZE + t_x];")
    $("}")
    $("__syncthreads();")
    $("if(t_x > %d)" % (s))
    $("{")
    $("    row_data[global_y*TILE_SIZE + t_x]-= row_data[global_x*TILE_SIZE +  %d]*row_data[global_y*TILE_SIZE + %d];" % (s,s))
    $("}")
    $("__syncthreads();")
    $endfor\

}
__device__ void syrk_tile(float* row_data,float* edit_data,int i,int j,int N) 
{
    int global_y = j*blockDim.y + threadIdx.y;
    int global_x = i*blockDim.x + threadIdx.x;
    int t_y = threadIdx.y;
    int t_x = threadIdx.x;
    float valueToSubtract = 0.0;
    $for(r in range(0,TILE_SIZE))\
    $("")
    $("valueToSubtract+= row_data[%d + global_y*TILE_SIZE]*row_data[%d + global_x*TILE_SIZE];" % (r,r))
    $endfor\
    
    edit_data[t_y*TILE_SIZE + t_x]-= valueToSubtract;
    __syncthreads();
}
__device__ void store_zeros(float* A,int N)
{
    int t_y = threadIdx.y;
    int t_x = threadIdx.x;
    $for(i in range(0,int(N/TILE_SIZE)-1))\
        $for(j in range(i+1,int(N/TILE_SIZE)))\
    $("")
    $("A[%d*blockDim.x + t_x + (%d*blockDim.y + t_y)*N] = 0.0;" % (j,i))
        $endfor\
    $endfor\

    __syncthreads();
}